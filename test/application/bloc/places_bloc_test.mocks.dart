// Mocks generated by Mockito 5.0.16 from annotations
// in travel_app/test/application/bloc/places_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:travel_app/core/usecase.dart' as _i8;
import 'package:travel_app/domain/entities/place.dart' as _i7;
import 'package:travel_app/domain/failures/places_failure.dart' as _i6;
import 'package:travel_app/domain/repositories/i_places_repository.dart' as _i2;
import 'package:travel_app/domain/usecases/get_all_places.dart' as _i4;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeIPlacesRepository_0 extends _i1.Fake
    implements _i2.IPlacesRepository {}

class _FakeEither_1<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

/// A class which mocks [GetAllPlaces].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllPlaces extends _i1.Mock implements _i4.GetAllPlaces {
  MockGetAllPlaces() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.IPlacesRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeIPlacesRepository_0()) as _i2.IPlacesRepository);
  @override
  _i5.Future<_i3.Either<_i6.PlacesFailure, List<_i7.Place>>> call(
          _i8.NoParams? _) =>
      (super.noSuchMethod(Invocation.method(#call, [_]),
              returnValue:
                  Future<_i3.Either<_i6.PlacesFailure, List<_i7.Place>>>.value(
                      _FakeEither_1<_i6.PlacesFailure, List<_i7.Place>>()))
          as _i5.Future<_i3.Either<_i6.PlacesFailure, List<_i7.Place>>>);
  @override
  String toString() => super.toString();
}
